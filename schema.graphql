"""
contract Owned {
    event OwnershipTransferProposed(address _from, address _to);
    event OwnershipTransferred(address _from, address _to);
    event AdminChange(address _admin, bool _status);
}

contract Wallet is Owned {
    event WalletUpdated(address newWallet);
}

contract ERC20Interface {
    event Transfer(address _from, address _to, uint _value);
    event Approval(address _owner, address _spender, uint _value);
}

contract LockSlots is ERC20Token {
    event RegisteredLockedTokens(address account, uint idx, uint tokens, uint term);
}

contract FantomIcoDates is Owned {
    event IcoDateUpdated(uint id, uint unixts);
}

contract FantomToken is ERC20Token, Wallet, LockSlots, FantomIcoDates {
    event Whitelisted(address account, uint countWhitelisted);
    event UpdatedTokensPerEth(uint tokensPerEth);
    event TokensMinted(uint mintType, address account, uint tokens, uint term);
    event RegisterContribution(address account, uint tokensIssued, uint ethContributed, uint ethReturned);
    event TokenExchangeRequested(address account, uint tokens);
}

"""

type ExampleEntity @entity {
  id: ID!
  count: BigInt!
  tokensPerEth: BigInt! # uint256
}

type Admin @entity {
  id: ID!
  sender: Bytes!
  admin: Bytes!
  active: Boolean!
}

type OwnershipTransfer @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  acepted: Boolean!
}

type Transaction @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
  spender: Bytes!
  ammount: BigInt!
}

enum IcoDateType {
  Start
  End
}

type IcoDate @entity {
  id: ID!
  admin: Admin!
  uinxts: BigInt!
  type: IcoDateType!
}

type TokenWallet @entity {
  id: ID!
  admin: Admin!
  wallet: Bytes!
  active: Boolean!
}

type LockedTokens @entity {
  id: ID!
  account: Bytes!
  idx: BigInt!
  tokens: BigInt!
  term: BigInt
}

type Contribution @entity {
  id: ID!
  wallet: TokenWallet!
  account: Bytes!
  tokensIssued: BigInt!
  ethContributed: BigInt!
  ethReturned: BigInt!
  tokensPerEth: TokensPerEth
}

type Whitelist @entity {
  id: ID!
  admin: Admin!
  account: Bytes!
  countWhitelisted: BigInt!
}

type TokensPerEth @entity {
  id: ID!
  admin: Admin!
  tokensPerEth: BigInt!
  active: Boolean!
}

type ExchangeRequest @entity {
  id: ID!
  account: Bytes!
  tokens: BigInt!
}

type Mint @entity {
  id: ID!
  mintType: BigInt!
  admin: Admin!
  account: Bytes!
  tokens: BigInt!
  term: BigInt!
  whitelist: Whitelist!
}


