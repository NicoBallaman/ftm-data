// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class UpdatedTokensPerEth extends ethereum.Event {
  get params(): UpdatedTokensPerEth__Params {
    return new UpdatedTokensPerEth__Params(this);
  }
}

export class UpdatedTokensPerEth__Params {
  _event: UpdatedTokensPerEth;

  constructor(event: UpdatedTokensPerEth) {
    this._event = event;
  }

  get tokensPerEth(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Whitelisted extends ethereum.Event {
  get params(): Whitelisted__Params {
    return new Whitelisted__Params(this);
  }
}

export class Whitelisted__Params {
  _event: Whitelisted;

  constructor(event: Whitelisted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get countWhitelisted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensMinted extends ethereum.Event {
  get params(): TokensMinted__Params {
    return new TokensMinted__Params(this);
  }
}

export class TokensMinted__Params {
  _event: TokensMinted;

  constructor(event: TokensMinted) {
    this._event = event;
  }

  get mintType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get term(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RegisterContribution extends ethereum.Event {
  get params(): RegisterContribution__Params {
    return new RegisterContribution__Params(this);
  }
}

export class RegisterContribution__Params {
  _event: RegisterContribution;

  constructor(event: RegisterContribution) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokensIssued(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ethContributed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ethReturned(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenExchangeRequested extends ethereum.Event {
  get params(): TokenExchangeRequested__Params {
    return new TokenExchangeRequested__Params(this);
  }
}

export class TokenExchangeRequested__Params {
  _event: TokenExchangeRequested;

  constructor(event: TokenExchangeRequested) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IcoDateUpdated extends ethereum.Event {
  get params(): IcoDateUpdated__Params {
    return new IcoDateUpdated__Params(this);
  }
}

export class IcoDateUpdated__Params {
  _event: IcoDateUpdated;

  constructor(event: IcoDateUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get unixts(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RegisteredLockedTokens extends ethereum.Event {
  get params(): RegisteredLockedTokens__Params {
    return new RegisteredLockedTokens__Params(this);
  }
}

export class RegisteredLockedTokens__Params {
  _event: RegisteredLockedTokens;

  constructor(event: RegisteredLockedTokens) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get idx(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get term(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WalletUpdated extends ethereum.Event {
  get params(): WalletUpdated__Params {
    return new WalletUpdated__Params(this);
  }
}

export class WalletUpdated__Params {
  _event: WalletUpdated;

  constructor(event: WalletUpdated) {
    this._event = event;
  }

  get newWallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferProposed extends ethereum.Event {
  get params(): OwnershipTransferProposed__Params {
    return new OwnershipTransferProposed__Params(this);
  }
}

export class OwnershipTransferProposed__Params {
  _event: OwnershipTransferProposed;

  constructor(event: OwnershipTransferProposed) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AdminChange extends ethereum.Event {
  get params(): AdminChange__Params {
    return new AdminChange__Params(this);
  }
}

export class AdminChange__Params {
  _event: AdminChange;

  constructor(event: AdminChange) {
    this._event = event;
  }

  get _admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FantomToken extends ethereum.SmartContract {
  static bind(address: Address): FantomToken {
    return new FantomToken("FantomToken", address);
  }

  DATE_LIMIT(): BigInt {
    let result = super.call("DATE_LIMIT", "DATE_LIMIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DATE_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DATE_LIMIT", "DATE_LIMIT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(param0: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  MAX_TOTAL_TOKEN_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_TOTAL_TOKEN_SUPPLY",
      "MAX_TOTAL_TOKEN_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_TOTAL_TOKEN_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOTAL_TOKEN_SUPPLY",
      "MAX_TOTAL_TOKEN_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOCK_SLOTS(): BigInt {
    let result = super.call("LOCK_SLOTS", "LOCK_SLOTS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LOCK_SLOTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("LOCK_SLOTS", "LOCK_SLOTS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  balancesMinted(param0: Address): BigInt {
    let result = super.call(
      "balancesMinted",
      "balancesMinted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_balancesMinted(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balancesMinted",
      "balancesMinted(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dateMainEnd(): BigInt {
    let result = super.call("dateMainEnd", "dateMainEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dateMainEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("dateMainEnd", "dateMainEnd():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_FIRST_DAY_CONTRIBUTION(): BigInt {
    let result = super.call(
      "MAXIMUM_FIRST_DAY_CONTRIBUTION",
      "MAXIMUM_FIRST_DAY_CONTRIBUTION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAXIMUM_FIRST_DAY_CONTRIBUTION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_FIRST_DAY_CONTRIBUTION",
      "MAXIMUM_FIRST_DAY_CONTRIBUTION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockTerm(param0: Address, param1: BigInt): BigInt {
    let result = super.call("lockTerm", "lockTerm(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_lockTerm(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockTerm",
      "lockTerm(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOKEN_MAIN_CAP(): BigInt {
    let result = super.call("TOKEN_MAIN_CAP", "TOKEN_MAIN_CAP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOKEN_MAIN_CAP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TOKEN_MAIN_CAP",
      "TOKEN_MAIN_CAP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedTokens(_account: Address): BigInt {
    let result = super.call("lockedTokens", "lockedTokens(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_lockedTokens(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedTokens",
      "lockedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMain(): boolean {
    let result = super.call("isMain", "isMain():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMain(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMain", "isMain():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMainFirstDay(): boolean {
    let result = super.call("isMainFirstDay", "isMainFirstDay():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMainFirstDay(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMainFirstDay", "isMainFirstDay():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numberWhitelisted(): BigInt {
    let result = super.call(
      "numberWhitelisted",
      "numberWhitelisted():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberWhitelisted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberWhitelisted",
      "numberWhitelisted():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensMinted(): BigInt {
    let result = super.call("tokensMinted", "tokensMinted():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensMinted(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensMinted", "tokensMinted():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableToMint(): BigInt {
    let result = super.call(
      "availableToMint",
      "availableToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToMint",
      "availableToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensToEth(_tokens: BigInt): BigInt {
    let result = super.call("tokensToEth", "tokensToEth(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokens)
    ]);

    return result[0].toBigInt();
  }

  try_tokensToEth(_tokens: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensToEth",
      "tokensToEth(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockedTokens(_account: Address): BigInt {
    let result = super.call(
      "unlockedTokens",
      "unlockedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_unlockedTokens(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unlockedTokens",
      "unlockedTokens(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensIssuedTotal(): BigInt {
    let result = super.call(
      "tokensIssuedTotal",
      "tokensIssuedTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensIssuedTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensIssuedTotal",
      "tokensIssuedTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balancesMintedByType(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "balancesMintedByType",
      "balancesMintedByType(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balancesMintedByType(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balancesMintedByType",
      "balancesMintedByType(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_CONTRIBUTION(): BigInt {
    let result = super.call(
      "MINIMUM_CONTRIBUTION",
      "MINIMUM_CONTRIBUTION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_CONTRIBUTION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_CONTRIBUTION",
      "MINIMUM_CONTRIBUTION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balancesMain(param0: Address): BigInt {
    let result = super.call("balancesMain", "balancesMain(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balancesMain(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balancesMain",
      "balancesMain(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  whitelist(param0: Address): boolean {
    let result = super.call("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ethToTokens(_eth: BigInt): BigInt {
    let result = super.call("ethToTokens", "ethToTokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_eth)
    ]);

    return result[0].toBigInt();
  }

  try_ethToTokens(_eth: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ethToTokens",
      "ethToTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_eth)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dateMainStart(): BigInt {
    let result = super.call("dateMainStart", "dateMainStart():(uint256)", []);

    return result[0].toBigInt();
  }

  try_dateMainStart(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dateMainStart",
      "dateMainStart():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMigrationPhaseOpen(): boolean {
    let result = super.call(
      "isMigrationPhaseOpen",
      "isMigrationPhaseOpen():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isMigrationPhaseOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMigrationPhaseOpen",
      "isMigrationPhaseOpen():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalEthContributed(): BigInt {
    let result = super.call(
      "totalEthContributed",
      "totalEthContributed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalEthContributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEthContributed",
      "totalEthContributed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensTradeable(): boolean {
    let result = super.call("tokensTradeable", "tokensTradeable():(bool)", []);

    return result[0].toBoolean();
  }

  try_tokensTradeable(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tokensTradeable",
      "tokensTradeable():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensPerEth(): BigInt {
    let result = super.call("tokensPerEth", "tokensPerEth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensPerEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensPerEth", "tokensPerEth():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAvailableLockSlot(_account: Address, _term: BigInt): boolean {
    let result = super.call(
      "isAvailableLockSlot",
      "isAvailableLockSlot(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_term)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAvailableLockSlot(
    _account: Address,
    _term: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAvailableLockSlot",
      "isAvailableLockSlot(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromUnsignedBigInt(_term)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferAnyERC20Token(_token_address: Address, _amount: BigInt): boolean {
    let result = super.call(
      "transferAnyERC20Token",
      "transferAnyERC20Token(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token_address),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferAnyERC20Token(
    _token_address: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferAnyERC20Token",
      "transferAnyERC20Token(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token_address),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensMain(): BigInt {
    let result = super.call("tokensMain", "tokensMain():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokensMain(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokensMain", "tokensMain():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockAmnt(param0: Address, param1: BigInt): BigInt {
    let result = super.call("lockAmnt", "lockAmnt(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBigInt();
  }

  try_lockAmnt(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockAmnt",
      "lockAmnt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstDayTokenLimit(): BigInt {
    let result = super.call(
      "firstDayTokenLimit",
      "firstDayTokenLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstDayTokenLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstDayTokenLimit",
      "firstDayTokenLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mayHaveLockedTokens(param0: Address): boolean {
    let result = super.call(
      "mayHaveLockedTokens",
      "mayHaveLockedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_mayHaveLockedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mayHaveLockedTokens",
      "mayHaveLockedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ethContributed(param0: Address): BigInt {
    let result = super.call(
      "ethContributed",
      "ethContributed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_ethContributed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ethContributed",
      "ethContributed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get _a(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintTokensLockedCall extends ethereum.Call {
  get inputs(): MintTokensLockedCall__Inputs {
    return new MintTokensLockedCall__Inputs(this);
  }

  get outputs(): MintTokensLockedCall__Outputs {
    return new MintTokensLockedCall__Outputs(this);
  }
}

export class MintTokensLockedCall__Inputs {
  _call: MintTokensLockedCall;

  constructor(call: MintTokensLockedCall) {
    this._call = call;
  }

  get _mint_type(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _term(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintTokensLockedCall__Outputs {
  _call: MintTokensLockedCall;

  constructor(call: MintTokensLockedCall) {
    this._call = call;
  }
}

export class MintTokensLockedMultipleCall extends ethereum.Call {
  get inputs(): MintTokensLockedMultipleCall__Inputs {
    return new MintTokensLockedMultipleCall__Inputs(this);
  }

  get outputs(): MintTokensLockedMultipleCall__Outputs {
    return new MintTokensLockedMultipleCall__Outputs(this);
  }
}

export class MintTokensLockedMultipleCall__Inputs {
  _call: MintTokensLockedMultipleCall;

  constructor(call: MintTokensLockedMultipleCall) {
    this._call = call;
  }

  get _mint_type(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _tokens(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _terms(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class MintTokensLockedMultipleCall__Outputs {
  _call: MintTokensLockedMultipleCall;

  constructor(call: MintTokensLockedMultipleCall) {
    this._call = call;
  }
}

export class OpenMigrationPhaseCall extends ethereum.Call {
  get inputs(): OpenMigrationPhaseCall__Inputs {
    return new OpenMigrationPhaseCall__Inputs(this);
  }

  get outputs(): OpenMigrationPhaseCall__Outputs {
    return new OpenMigrationPhaseCall__Outputs(this);
  }
}

export class OpenMigrationPhaseCall__Inputs {
  _call: OpenMigrationPhaseCall;

  constructor(call: OpenMigrationPhaseCall) {
    this._call = call;
  }
}

export class OpenMigrationPhaseCall__Outputs {
  _call: OpenMigrationPhaseCall;

  constructor(call: OpenMigrationPhaseCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _a(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class RequestTokenExchangeCall extends ethereum.Call {
  get inputs(): RequestTokenExchangeCall__Inputs {
    return new RequestTokenExchangeCall__Inputs(this);
  }

  get outputs(): RequestTokenExchangeCall__Outputs {
    return new RequestTokenExchangeCall__Outputs(this);
  }
}

export class RequestTokenExchangeCall__Inputs {
  _call: RequestTokenExchangeCall;

  constructor(call: RequestTokenExchangeCall) {
    this._call = call;
  }

  get _tokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestTokenExchangeCall__Outputs {
  _call: RequestTokenExchangeCall;

  constructor(call: RequestTokenExchangeCall) {
    this._call = call;
  }
}

export class SetDateMainEndCall extends ethereum.Call {
  get inputs(): SetDateMainEndCall__Inputs {
    return new SetDateMainEndCall__Inputs(this);
  }

  get outputs(): SetDateMainEndCall__Outputs {
    return new SetDateMainEndCall__Outputs(this);
  }
}

export class SetDateMainEndCall__Inputs {
  _call: SetDateMainEndCall;

  constructor(call: SetDateMainEndCall) {
    this._call = call;
  }

  get _unixts(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDateMainEndCall__Outputs {
  _call: SetDateMainEndCall;

  constructor(call: SetDateMainEndCall) {
    this._call = call;
  }
}

export class MintTokensCall extends ethereum.Call {
  get inputs(): MintTokensCall__Inputs {
    return new MintTokensCall__Inputs(this);
  }

  get outputs(): MintTokensCall__Outputs {
    return new MintTokensCall__Outputs(this);
  }
}

export class MintTokensCall__Inputs {
  _call: MintTokensCall;

  constructor(call: MintTokensCall) {
    this._call = call;
  }

  get _mint_type(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintTokensCall__Outputs {
  _call: MintTokensCall;

  constructor(call: MintTokensCall) {
    this._call = call;
  }
}

export class AddToWhitelistMultipleCall extends ethereum.Call {
  get inputs(): AddToWhitelistMultipleCall__Inputs {
    return new AddToWhitelistMultipleCall__Inputs(this);
  }

  get outputs(): AddToWhitelistMultipleCall__Outputs {
    return new AddToWhitelistMultipleCall__Outputs(this);
  }
}

export class AddToWhitelistMultipleCall__Inputs {
  _call: AddToWhitelistMultipleCall;

  constructor(call: AddToWhitelistMultipleCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddToWhitelistMultipleCall__Outputs {
  _call: AddToWhitelistMultipleCall;

  constructor(call: AddToWhitelistMultipleCall) {
    this._call = call;
  }
}

export class RequestTokenExchangeMaxCall extends ethereum.Call {
  get inputs(): RequestTokenExchangeMaxCall__Inputs {
    return new RequestTokenExchangeMaxCall__Inputs(this);
  }

  get outputs(): RequestTokenExchangeMaxCall__Outputs {
    return new RequestTokenExchangeMaxCall__Outputs(this);
  }
}

export class RequestTokenExchangeMaxCall__Inputs {
  _call: RequestTokenExchangeMaxCall;

  constructor(call: RequestTokenExchangeMaxCall) {
    this._call = call;
  }
}

export class RequestTokenExchangeMaxCall__Outputs {
  _call: RequestTokenExchangeMaxCall;

  constructor(call: RequestTokenExchangeMaxCall) {
    this._call = call;
  }
}

export class UpdateTokensPerEthCall extends ethereum.Call {
  get inputs(): UpdateTokensPerEthCall__Inputs {
    return new UpdateTokensPerEthCall__Inputs(this);
  }

  get outputs(): UpdateTokensPerEthCall__Outputs {
    return new UpdateTokensPerEthCall__Outputs(this);
  }
}

export class UpdateTokensPerEthCall__Inputs {
  _call: UpdateTokensPerEthCall;

  constructor(call: UpdateTokensPerEthCall) {
    this._call = call;
  }

  get _tokens_per_eth(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTokensPerEthCall__Outputs {
  _call: UpdateTokensPerEthCall;

  constructor(call: UpdateTokensPerEthCall) {
    this._call = call;
  }
}

export class MakeTradeableCall extends ethereum.Call {
  get inputs(): MakeTradeableCall__Inputs {
    return new MakeTradeableCall__Inputs(this);
  }

  get outputs(): MakeTradeableCall__Outputs {
    return new MakeTradeableCall__Outputs(this);
  }
}

export class MakeTradeableCall__Inputs {
  _call: MakeTradeableCall;

  constructor(call: MakeTradeableCall) {
    this._call = call;
  }
}

export class MakeTradeableCall__Outputs {
  _call: MakeTradeableCall;

  constructor(call: MakeTradeableCall) {
    this._call = call;
  }
}

export class TransferMultipleCall extends ethereum.Call {
  get inputs(): TransferMultipleCall__Inputs {
    return new TransferMultipleCall__Inputs(this);
  }

  get outputs(): TransferMultipleCall__Outputs {
    return new TransferMultipleCall__Outputs(this);
  }
}

export class TransferMultipleCall__Inputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class TransferMultipleCall__Outputs {
  _call: TransferMultipleCall;

  constructor(call: TransferMultipleCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetDateMainStartCall extends ethereum.Call {
  get inputs(): SetDateMainStartCall__Inputs {
    return new SetDateMainStartCall__Inputs(this);
  }

  get outputs(): SetDateMainStartCall__Outputs {
    return new SetDateMainStartCall__Outputs(this);
  }
}

export class SetDateMainStartCall__Inputs {
  _call: SetDateMainStartCall;

  constructor(call: SetDateMainStartCall) {
    this._call = call;
  }

  get _unixts(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDateMainStartCall__Outputs {
  _call: SetDateMainStartCall;

  constructor(call: SetDateMainStartCall) {
    this._call = call;
  }
}

export class MintTokensMultipleCall extends ethereum.Call {
  get inputs(): MintTokensMultipleCall__Inputs {
    return new MintTokensMultipleCall__Inputs(this);
  }

  get outputs(): MintTokensMultipleCall__Outputs {
    return new MintTokensMultipleCall__Outputs(this);
  }
}

export class MintTokensMultipleCall__Inputs {
  _call: MintTokensMultipleCall;

  constructor(call: MintTokensMultipleCall) {
    this._call = call;
  }

  get _mint_type(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _tokens(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MintTokensMultipleCall__Outputs {
  _call: MintTokensMultipleCall;

  constructor(call: MintTokensMultipleCall) {
    this._call = call;
  }
}

export class TransferAnyERC20TokenCall extends ethereum.Call {
  get inputs(): TransferAnyERC20TokenCall__Inputs {
    return new TransferAnyERC20TokenCall__Inputs(this);
  }

  get outputs(): TransferAnyERC20TokenCall__Outputs {
    return new TransferAnyERC20TokenCall__Outputs(this);
  }
}

export class TransferAnyERC20TokenCall__Inputs {
  _call: TransferAnyERC20TokenCall;

  constructor(call: TransferAnyERC20TokenCall) {
    this._call = call;
  }

  get _token_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferAnyERC20TokenCall__Outputs {
  _call: TransferAnyERC20TokenCall;

  constructor(call: TransferAnyERC20TokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetWalletCall extends ethereum.Call {
  get inputs(): SetWalletCall__Inputs {
    return new SetWalletCall__Inputs(this);
  }

  get outputs(): SetWalletCall__Outputs {
    return new SetWalletCall__Outputs(this);
  }
}

export class SetWalletCall__Inputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWalletCall__Outputs {
  _call: SetWalletCall;

  constructor(call: SetWalletCall) {
    this._call = call;
  }
}

export class AddToWhitelistCall extends ethereum.Call {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
